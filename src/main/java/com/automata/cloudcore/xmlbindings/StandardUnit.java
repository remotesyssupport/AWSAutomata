//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.07.02 at 01:05:27 PM IST 
//


package com.automata.cloudcore.xmlbindings;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for StandardUnit.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="StandardUnit">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Seconds"/>
 *     &lt;enumeration value="Microseconds"/>
 *     &lt;enumeration value="Milliseconds"/>
 *     &lt;enumeration value="Bytes"/>
 *     &lt;enumeration value="Kilobytes"/>
 *     &lt;enumeration value="Megabytes"/>
 *     &lt;enumeration value="Gigabytes"/>
 *     &lt;enumeration value="Terabytes"/>
 *     &lt;enumeration value="Bits"/>
 *     &lt;enumeration value="Kilobits"/>
 *     &lt;enumeration value="Megabits"/>
 *     &lt;enumeration value="Gigabits"/>
 *     &lt;enumeration value="Terabits"/>
 *     &lt;enumeration value="Percent"/>
 *     &lt;enumeration value="Count"/>
 *     &lt;enumeration value="Bytes/Second"/>
 *     &lt;enumeration value="Kilobytes/Second"/>
 *     &lt;enumeration value="Megabytes/Second"/>
 *     &lt;enumeration value="Gigabytes/Second"/>
 *     &lt;enumeration value="Terabytes/Second"/>
 *     &lt;enumeration value="Bits/Second"/>
 *     &lt;enumeration value="Kilobits/Second"/>
 *     &lt;enumeration value="Megabits/Second"/>
 *     &lt;enumeration value="Gigabits/Second"/>
 *     &lt;enumeration value="Terabits/Second"/>
 *     &lt;enumeration value="Count/Second"/>
 *     &lt;enumeration value="None"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "StandardUnit")
@XmlEnum
public enum StandardUnit {

    @XmlEnumValue("Seconds")
    SECONDS("Seconds"),
    @XmlEnumValue("Microseconds")
    MICROSECONDS("Microseconds"),
    @XmlEnumValue("Milliseconds")
    MILLISECONDS("Milliseconds"),
    @XmlEnumValue("Bytes")
    BYTES("Bytes"),
    @XmlEnumValue("Kilobytes")
    KILOBYTES("Kilobytes"),
    @XmlEnumValue("Megabytes")
    MEGABYTES("Megabytes"),
    @XmlEnumValue("Gigabytes")
    GIGABYTES("Gigabytes"),
    @XmlEnumValue("Terabytes")
    TERABYTES("Terabytes"),
    @XmlEnumValue("Bits")
    BITS("Bits"),
    @XmlEnumValue("Kilobits")
    KILOBITS("Kilobits"),
    @XmlEnumValue("Megabits")
    MEGABITS("Megabits"),
    @XmlEnumValue("Gigabits")
    GIGABITS("Gigabits"),
    @XmlEnumValue("Terabits")
    TERABITS("Terabits"),
    @XmlEnumValue("Percent")
    PERCENT("Percent"),
    @XmlEnumValue("Count")
    COUNT("Count"),
    @XmlEnumValue("Bytes/Second")
    BYTES_SECOND("Bytes/Second"),
    @XmlEnumValue("Kilobytes/Second")
    KILOBYTES_SECOND("Kilobytes/Second"),
    @XmlEnumValue("Megabytes/Second")
    MEGABYTES_SECOND("Megabytes/Second"),
    @XmlEnumValue("Gigabytes/Second")
    GIGABYTES_SECOND("Gigabytes/Second"),
    @XmlEnumValue("Terabytes/Second")
    TERABYTES_SECOND("Terabytes/Second"),
    @XmlEnumValue("Bits/Second")
    BITS_SECOND("Bits/Second"),
    @XmlEnumValue("Kilobits/Second")
    KILOBITS_SECOND("Kilobits/Second"),
    @XmlEnumValue("Megabits/Second")
    MEGABITS_SECOND("Megabits/Second"),
    @XmlEnumValue("Gigabits/Second")
    GIGABITS_SECOND("Gigabits/Second"),
    @XmlEnumValue("Terabits/Second")
    TERABITS_SECOND("Terabits/Second"),
    @XmlEnumValue("Count/Second")
    COUNT_SECOND("Count/Second"),
    @XmlEnumValue("None")
    NONE("None");
    private final String value;

    StandardUnit(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static StandardUnit fromValue(String v) {
        for (StandardUnit c: StandardUnit.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
